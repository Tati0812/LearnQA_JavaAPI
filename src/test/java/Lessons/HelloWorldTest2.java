package Lessons;import io.qameta.allure.Description;import io.qameta.allure.Feature;import io.restassured.http.Headers;import io.restassured.path.json.JsonPath;import org.junit.jupiter.api.Test;import io.restassured.RestAssured;import io.restassured.response.Response;import java.util.HashMap;import java.util.Map;public class HelloWorldTest2 {    @Feature("Работаем с параметрами запросов и json")    @Test    public void testHelloWorld(){        Response response = RestAssured                .get("https://playground.learnqa.ru/api/hello")                .andReturn();        response.prettyPrint();    }    @Test    public void parseJsonAnswer(){        Map<String,String> params = new HashMap<>();        //params.put("message","And this is a second message");        params.put("name","John");        JsonPath response = RestAssured                .given()                .queryParams(params)                .get("https://playground.learnqa.ru/api/hello")                .jsonPath();        String answer = response.get("answer");        System.out.println(answer);        //придет ответ вида Hello, John    }    @Test    public void testQueryParamAsIsThroughtGet(){        Response response = RestAssured                .given()                .get("https://playground.learnqa.ru/api/check_type")                .andReturn();        response.prettyPrint();        //придет ответ вида        // <html>        //  <body>Request type: GET        //        //GET params:        //</body>        //</html>    }    @Test    public void testQueryParamAsIsThroughtGetWihtQueryParams(){        Response response = RestAssured                .given()                .queryParam("param1", "value1")                .queryParam("param2", "value2")                .get("https://playground.learnqa.ru/api/check_type")                .andReturn();        response.print();        // придет ответ вида        // GET params:        //param1 = value1        //param2 = value2    }    @Test    public void testQueryParamAsIsThroughtPostWithBody(){        Response response = RestAssured                .given()                // передали в теле параметры в "сыром виде"                .body("param1=value1&param2=value2")                .post("https://playground.learnqa.ru/api/check_type")                .andReturn();        response.prettyPrint();        // придет ответ вида        // <html>        //  <body>Request type: POST        //        //POST params:        //param1 = value1        //param2 = value2        //</body>        //</html>    }    @Test    public void testQueryParamAsIsThroughtPostWithBodyForUsualOutput(){        Response response = RestAssured                .given()                // передали в теле параметры в "сыром виде"                .body("param1=value1&param2=value2")                .post("https://playground.learnqa.ru/api/check_type")                .andReturn();        response.print();        // придет ответ вида        // POST params:        //param1 = value1        //param2 = value2    }    @Test    public void testPostWithBodyJson() {        Response response = RestAssured                .given()                // передали в теле строку с параметрами в виде json                // так делать неудобно, если много параметров                .body("{\"param1\":\"value1\",\"param2\":\"value2\"}")                .post("https://playground.learnqa.ru/api/check_type")                .andReturn();        response.print();        // придет ответ вида        // POST params:        //param1 = value1        //param2 = value2    }    @Test    public void testPostWithMapParams() {        //когда используем Map, всегда работаем с json.        // Но за нас строку составляет Rest assured        Map<String, String> body = new HashMap<>();        body.put("param1","value1");        body.put("param2", "value2");        Response response = RestAssured                .given()                .body(body)                .post("https://playground.learnqa.ru/api/check_type")                .andReturn();        response.print();        // придет ответ вида        // POST params:        //param1 = value1        //param2 = value2    }    @Feature("Ниже работаем с кодами ответа от сервера")    @Test    public void testReturnStatusCode_200() {        Response response = RestAssured                .get("https://playground.learnqa.ru/api/check_type")                .andReturn();        int statusCode = response.statusCode();        System.out.println(statusCode);        // придет ответ        // 200    }    @Test    public void testReturnStatusCode_500() {        Response response = RestAssured                .get("https://playground.learnqa.ru/api/get_500")                .andReturn();        int statusCode = response.statusCode();        System.out.println(statusCode);        // придет ответ        // 500    }    @Test    public void testReturnStatusCode_303() {        // сервер сообщает клиенту, что ресурс не находит и перенаравляет на другой URL.        // Сервер укажет, куда перейти в заголовке location.        // В rest assured есть метод follow location        Response response = RestAssured                .given()                .redirects()                .follow(false) // запрещаем следовать редиректу                .when()                .get("https://playground.learnqa.ru/api/get_303")                .andReturn();        int statusCode = response.statusCode();        System.out.println(statusCode);        // придет ответ        // 303    }    @Test    public void testReturnStatusCodeWithRedirect_200() {        // сервер сообщает клиенту, что ресурс не находит и перенаравляет на другой URL.        // Сервер укажет, куда перейти в заголовке location.        // В rest assured есть метод follow location        Response response = RestAssured                .given()                .redirects()                .follow(true)                .when()                .get("https://playground.learnqa.ru/api/get_303")                .andReturn();        int statusCode = response.statusCode();        System.out.println(statusCode);        // придет ответ        // 200    }    @Feature("Ниже работаем с Заголовками")    @Description("Заголовки = служебная информация. " +            "Есть у запроса и ответа. " +            "В rest assured передаются с помощью Hash Map")    @Test    public void testAllHeaders (){        Map<String, String> headers = new HashMap<>();        headers.put("MyHeader1", "MyValue1");        headers.put("MyHeader2", "MyValue2");        Response response = RestAssured                .given()                .headers(headers)                .when()                .get("https://playground.learnqa.ru/api/show_all_headers")                .andReturn();       response.prettyPrint();       //так удобнее получать ответ ВСЕХ заголовков        Headers responseHeaders = response.getHeaders();        System.out.println(responseHeaders);    }    @Test    public void testLocationHeadersFor_303(){        Response response = RestAssured                .given()                .redirects()                .follow(false)                .when()                .get("https://playground.learnqa.ru/api/get_303")                .andReturn();        response.print();        //так удобнее получать ответ ВСЕХ заголовков        String locationHeaders = response.getHeader("Location");        System.out.println(locationHeaders);        //ответ You will be redirected        //https://playground.learnqa.ru/api/hello    }    @Feature("Работа с Cookie")    @Description("Cookie - специальные файлы, которые создает клиент(моб прил или браузер) на основе ответа сервера." +            "Есть срок годности, после которого удаляются клиентом." +            "Куки имеют имя, значение, принадлежность к домену." +            "Клиент прикладывает все куки к домену, куда идет запрос. " +            "Самые популярные - авторизационные")    @Test    public void testCookies(){        Map<String,String> data = new HashMap<>();        data.put("login","secret_login");        data.put("password","secret_pass");        Response response = RestAssured                .given()                .body(data)                .when()                .post("https://playground.learnqa.ru/api/get_auth_cookie")                .andReturn();        System.out.println("\nPretty text:");        response.prettyPrint();        System.out.println("\nHeaders:");        Headers responseHeaders = response.getHeaders();        System.out.println(responseHeaders);        System.out.println("\nCookies:");        Map<String,String> responseCookies = response.getCookies();        System.out.println(responseCookies);        //ответ Cookies:        //{auth_cookie=438750}    }    @Test    public void testOnlyCookiesValueInOut(){        Map<String,String> data = new HashMap<>();        data.put("login","secret_login");        data.put("password","secret_pass");        Response response = RestAssured                .given()                .body(data)                .when()                .post("https://playground.learnqa.ru/api/get_auth_cookie")                .andReturn();        String responseCookie = response.getCookie("auth_cookie"); //берем значение нужной куки        System.out.println(responseCookie);        // ответ 329442    }    @Test    public void testWrongCookiesValueInOut(){        Map<String,String> data = new HashMap<>();        data.put("login","secret_login2");        data.put("password","secret_pass2");        Response response = RestAssured                .given()                .body(data)                .when()                .post("https://playground.learnqa.ru/api/get_auth_cookie")                .andReturn();        System.out.println("\nPretty text:");        response.prettyPrint();        //ответ Pretty text:        //{        //    "error": "Wrong data"        //}        System.out.println("\nHeaders:");        Headers responseHeaders = response.getHeaders();        System.out.println(responseHeaders);        System.out.println("\nCookies:");        Map<String,String> responseCookies = response.getCookies();        System.out.println(responseCookies);        // ответ Cookies:        //{}    }    @Test    public void testCheckCookiesValueAuthorized(){        Map<String,String> data = new HashMap<>();        data.put("login","secret_login");        data.put("password","secret_pass");        Response responseForGet = RestAssured                .given()                .body(data)                .when()                .get("https://playground.learnqa.ru/api/get_auth_cookie")                .andReturn();        String responseCookie = responseForGet.getCookie("auth_cookie");        Map<String,String> cookies = new HashMap<>();        cookies.put("auth_cookie", responseCookie);        Response responseForCheck = RestAssured                .given()                .body(data)                .cookies(cookies)                .when()                .post("https://playground.learnqa.ru/api/check_auth_cookie")                .andReturn();        responseForCheck.print();        //ответ You are authorized    }    @Test    public void testCheckCookiesValueNotAuthorized(){        Map<String,String> data = new HashMap<>();        data.put("login","secret_login2");        data.put("password","secret_pass2");        Response responseForGet = RestAssured                .given()                .body(data)                .when()                .get("https://playground.learnqa.ru/api/get_auth_cookie")                .andReturn();        String responseCookie = responseForGet.getCookie("auth_cookie");        Map<String,String> cookies = new HashMap<>();        if (responseCookie != null){            cookies.put("auth_cookie", responseCookie);        }        Response responseForCheck = RestAssured                .given()                .body(data)                .cookies(cookies)                .when()                .post("https://playground.learnqa.ru/api/check_auth_cookie")                .andReturn();        responseForCheck.print();        //ответ You are NOT authorized    }}